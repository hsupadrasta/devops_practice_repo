import os
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk, ImageChops
from skimage.metrics import structural_similarity as ssim

class ImageComparatorApp:
    def __init__(self, root):
        self.root = root
        self.input_folder1 = ""
        self.input_folder2 = ""
        self.diff_folder = ""
        self.results = []
        self.current_result_index = 0

        self.label_status = tk.Label(root, text="")
        self.compare_button = tk.Button(root, text="Compare", command=self.compare_images)
        self.view_results_button = tk.Button(root, text="View Results", command=self.view_results)

        self.initialize_ui()

    def initialize_ui(self):
        self.root.title("Image Comparator")

        tk.Label(self.root, text="Input Folder 1:").pack()
        tk.Entry(self.root, textvariable=self.input_folder1).pack()
        tk.Button(self.root, text="Browse", command=lambda: self.browse_folder("input_folder1")).pack()

        tk.Label(self.root, text="Input Folder 2:").pack()
        tk.Entry(self.root, textvariable=self.input_folder2).pack()
        tk.Button(self.root, text="Browse", command=lambda: self.browse_folder("input_folder2")).pack()

        tk.Label(self.root, text="Diff Folder:").pack()
        tk.Entry(self.root, textvariable=self.diff_folder).pack()
        tk.Button(self.root, text="Browse", command=lambda: self.browse_folder("diff_folder")).pack()

        self.compare_button.pack()
        self.view_results_button.pack()
        self.label_status.pack()

    def compare_images(self):
        if not self.input_folder1 or not self.input_folder2 or not self.diff_folder:
            return

        self.results = []
        input_files1 = sorted(os.listdir(self.input_folder1))
        input_files2 = sorted(os.listdir(self.input_folder2))
        diff_files = sorted(os.listdir(self.diff_folder))

        for file1, file2, diff_file in zip(input_files1, input_files2, diff_files):
            image1 = Image.open(os.path.join(self.input_folder1, file1))
            image2 = Image.open(os.path.join(self.input_folder2, file2))
            diff_image = Image.open(os.path.join(self.diff_folder, diff_file))

            # Calculate Structural Similarity Index and Mean Squared Error
            ssim_score = ssim(image1, image2, multichannel=True)
            mse = self.calculate_mse(image1, image2)

            self.results.append((image1, image2, diff_image, ssim_score, mse))

        # Display compared message
        self.display_compared_message()

    def calculate_mse(self, image1, image2):
        # Calculate Mean Squared Error between two images
        mse = sum((px1 - px2) ** 2 for px1, px2 in zip(image1.getdata(), image2.getdata())) / float(image1.size[0] * image1.size[1])
        return mse

    def display_compared_message(self):
        self.label_status.config(text="Comparison Complete")

    def view_results(self):
        if not self.results:
            return

        results_window = tk.Toplevel(self.root)
        self.current_result_index = 0
        self.display_result(results_window)

    def display_result(self, results_window):
        if self.current_result_index >= len(self.results):
            tk.Label(results_window, text="All results compared").pack()
            return

        image1, image2, diff_image, ssim_score, mse = self.results[self.current_result_index]

        img1_tk = ImageTk.PhotoImage(image=image1)
        img2_tk = ImageTk.PhotoImage(image=image2)
        diff_img_tk = ImageTk.PhotoImage(image=diff_image)

        tk.Label(results_window, image=img1_tk).pack()
        tk.Label(results_window, image=img2_tk).pack()
        tk.Label(results_window, image=diff_img_tk).pack()
        tk.Label(results_window, text=f"SSIM: {ssim_score:.2f}\nMSE: {mse:.2f}").pack()

        tk.Button(results_window, text="Next", command=lambda: self.next_result(results_window)).pack()

        self.current_result_index += 1

    def next_result(self, results_window):
        self.display_result(results_window)

    def browse_folder(self, folder_var):
        folder = filedialog.askdirectory()
        if folder_var == "input_folder1":
            self.input_folder1 = folder
        elif folder_var == "input_folder2":
            self.input_folder2 = folder
        elif folder_var == "diff_folder":
            self.diff_folder = folder

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    app = ImageComparatorApp(root)
    app.run()
