import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA

# Generate synthetic time-series data with anomalies
np.random.seed(0)
N = 100
x = np.linspace(0, 4 * np.pi, N)
y = np.sin(x) + 0.5 * np.random.normal(size=N)
y[20] = 3
y[40] = -3

# Create a pandas DataFrame
df = pd.DataFrame({'value': y})

# Fit an ARIMA model
model = ARIMA(df['value'], order=(5,1,0))
model_fit = model.fit()

# Get residuals (prediction errors)
residuals = pd.Series(model_fit.fittedvalues, copy=True)
residuals = residuals - df['value']

# Calculate Z-scores of residuals
z_scores = (residuals - np.mean(residuals)) / np.std(residuals)

# Set a threshold for anomaly detection
threshold = 2

# Identify anomalies
anomalies = np.where(np.abs(z_scores) > threshold)[0]

# Plotting
plt.figure(figsize=(14, 8))
plt.plot(x, y, label='Original Data')
plt.scatter(x[anomalies], y[anomalies], color='red', label='Anomalies')
plt.title('Time-Series Anomaly Detection with ARIMA')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.show()
